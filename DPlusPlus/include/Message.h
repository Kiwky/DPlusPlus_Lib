#pragma once

#include <vector>
#include <nlohmann/json.hpp>

#include "Utilities.h"
#include "Snowflake.h"

using nJson = nlohmann::json;
using namespace DPlusPlus::Template;

enum Message_Type {
	DEFAULT = 0,
	RECIPIENT_ADD,
	RECIPIENT_REMOVE,
	CALL,
	CHANNEL_NAME_CHANGE,
	CHANNEL_ICON_CHANGE,
	CHANNEL_PINNED_MESSAGE,
	GUILD_MEMBER_JOIN,
	USER_PREMIUM_GUILD_SUBSCRIPTION,
	USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_1,
	USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_2,
	USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_3,
	CHANNEL_FOLLOW_ADD,
	GUILD_DISCOVERY_DISQUALIFIED,
	GUILD_DISCOVERY_REQUALIFIED,
	REPLY,
	APPLICATION_COMMAND,
};

class Message {

public:
	Snowflake id;							// id of the message.
	Snowflake channel_id;					// id of the channel the message was sent in.
	Snowflake guild_id;						// id of the guild the message was sent in
	Snowflake webhook_id;					// if the message is generated by a webhook, this is the webhook's id
	int flags;								// message flags combined as a bitfield
	Message_Type type;						// type of message
	//User author;							// the author of this message (not guaranteed to be a valid user, see below)
	//Member member;						// member properties for this message's author
	std::string content;					// contents of the message
	std::string timestamp;					// when this message was sent
	std::string edited_timestamp;			// when this message was edited (or null if never)
	bool tts;								// whether this was a TTS message
	bool mention_everyone;					// whether this message mentions everyone
	bool pinned;							// whether this message is pinned
	//std::vector<User> mentions;			// users specifically mentioned in the message
	//std::vector<Role> mention_roles;		// roles specifically mentioned in this message
	//std::vector<Attachments> attachments;	// any attached files
	//std::vector<Embed> embeds;			// any embedded content
	//std::vector<Reaction> reactions;		// reactions to the message

public:
	Message() {}
	Message(const nJson &data);

public:
	void ToJson(nJson &j);

};

